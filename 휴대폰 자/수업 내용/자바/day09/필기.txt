1. String

2. 정규표현식
 2-1. 정규표현식 이란?
  - 정규표현식(Regular expression)은 특정한 규칙을 가진 문자열의 집합을
  표현하는데 사용하는 "형식언어"이다.
  - 정규표현식은 많은 텍스트 편집기와 프로그램밍 언어에서 '문자열의 검색과
  치환'을 위해 지원하고 있다.

 2-2. 정규표현식 사용
  boolean java.util.regex.Pattern.matches(String arg0,CharSequence arg1)

 - arg0 : 정규표현식 문자열
 - arg1 : 형식으 검사받기 위한 내용
  - 즉, arg1 이 arg0의 형식에 맞는지를 검사하고 결과를 boolean 으로 리턴

3. 예외처리
 3-1. 에러의 종류
  - 컴파일 에러
	-> 소스코드의 구문 오류로 인하여 컴파일이 불가능한 상태
	-> 이클립스에서 빨간색으로 표시되는 경우에 해당한다
	-> 프로그램을 실행하기 전에 발견되므로 상대적으로 고치기 쉽다.

  - 런타임 에러
	-> 구문상의 에러는 없지만, 프로그램이 실행되는 과정에서
	다양한 경우의 수에 대응하지 못하여 발생하는 예외 상황.
	-> 런타임에러가 발생하면 프로그램은 강제 종료된다.
	-> 우리가 프로그램의 에러라고 부르는 현상은 대부분 런타임 에러에
	해당된다. 

 3-2. 런타임 에러의 종류
  - 런타임 에러에는 프로그램 자체의 구조적인 문제로 인한 논리적 오류와 자바 가상
  머신 자체의 문제로 인한 오류, 그리고 예외가 있다. 
  - 논리 오류
	-> 논리적인 모순이 생기지 않도록 코드 작성
 - 자바 가상 머신 자체 오류
	-> 프로그래머가 책임 질 수 있는 수준의 오류가 아니다.
 - 예외(Exception)
 	-> 프로그램 실행 중에 발생할 수 있는 에기치 않은 사건으로, 
	프로그래머의 노력으로 처리할 수 있다.
	-> 자바 가상 머신은 프로그램 실행중에 예외가 발생하면 관련된 예외
	클래스로부터 예외 객체를 생성하여 프로그램에서 지정된 예외 처리
	구문으로 넘긴다.
	-> 예외가 발생하면 프로그램에 지정된 예외 처리 구문이 자바 가상머신에
	의해 호출되고, 이때 전달되는 예외 객체를 넘겨받아 적절한 처리를
	수행한다. 

 3-3. 예외처리
  - java에서는 try ~ catch ~ finally 구문을 통해 프로그래머가 예외 상황에 
  대응할 수 있도록 하고 있다.

	try{
		// 기본적으로 실행되는 부분
	} catch( 예외클래스이름 객체이름 ){
		// try블록에서 예외가 발생한 경우 이 곳으로 제어가 넘어온다
	} finally {
		// 예외 상황은 발생 여부에 상관 없이 무조건 실행되는 부분
		// finally 블록은 생략 가능하다.
	}

 - try 블록 실행도중 catch에서 명시한 예외 클래스에 해당하는 런타임 에러가
 발생하면, try 블록을 즉시 중단하고 catch 블록이 실행된 후, finally블록이
 실행된다
  - 예외가 발생하지 않을 경우에는 try 블록 종료 후 finally 블록이 실행된다. 










