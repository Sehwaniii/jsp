1. 내장함수
 1-1. eval(문자열)
  - 주어진 문자열을 수식으로 변환하여 리턴한다. 

 1-2. Number(문자열)
 - 주어진 문자열의 변수가 숫자모양일 경우 실제 숫자형으로 
  변환하여 리턴한다.

 1-3. parseInt(문자열)
 - 주어진 문자열의 변수가 숫자모양일 경우 실제 숫자형으로 
  변환하여 리턴한다.

 1-4. 숫자 변환 함수의 한계
  - Number함수와 parseInt함수는 파라미터로 전달된 문자열이
  숫자 형태가 아닌 경우 "NaN"이라는 값을 리턴하는데, 이 "NaN"값과
  숫자값과의 연산은 모든 결과가 "NaN"이다. 

 1-5. 변수의 NaN여부를 검사하는 함수
  - isNaN함수는 파라미터로 전달되는 변수의 NaN여부를 boolean
  형태로 리턴한다.
  - 파라미터가 숫자로 변환할 수 없는 문자열일 경우에는 NaN형태
  이프로 true를 리턴한다. 
  - 파라미터가 숫자 모양을 한 문자열이거나 실제 숫자형 변수일 
  경우에는 NaN이 아니므로 false를 리턴한다. 
  - 숫자인지 검사하기
	-> parseInt함수나 Number함수의 정상동작을 보장하기
	위해서는 파라미터를 전달하기 전에 해당 값이 NaN이 
	아니라는 것을 검사해야 한다. 
	-> isNaN함수의 결과를 부정하면 그 값은 숫자값이거나 
	숫자형으로 변환 가능한 문자열이라는 의미가 된다.
	-> let is_num = !isNaN(검사할값);

 1-6. alert 대화상자
  - 웹 페이지에서 가장 일반적으로 사용되는 대화상자로, 사용자에게
  정보를 보여주기 위하여 사용된다.
  - 이 대화상자에는 "확인"버튼이 함께 표시된다.
  - alert대화상자를 웹 페이지에 표시하기 위해서는 alert함수에
  표시하고자 하는 메시지를 파라미터로 전달한다. 

 1-7. confirm 대화상자
  - 사용자에게 어따한 결정사항에 대한 긍정 혹은 부정의 답을 얻고자
  하는 경우에 표시되는 대화상자이다.
  - confirm함수에 사용자에게 물어볼 내용을 문자열 파라미터로 전달
  한다.
  - confirm 함수는 사용자가 긍정의 버튼을 클릭하면 true, 
  부정의 버튼을 클릭하면 false를 리턴하여 주기 때문에, 이 값을
  사용하여 if문을 구성하면 사용자의 선택에 따른 후속처리를
  구현할 수 있다.

 1-8. prompt대화상자
  - 사용자가 입력 내용을 얻고자 한 경우에 사용하는 대화상자
  - 이 함수에는 사용자에게 표시할 문구와 입력칸에 설정할 기본값을
  파라미터로 전달한다.
  - 만약 입력칸에 설정할 기본 내용이없다면, 빈문자열("")을
  파라미터로 설정해도 된다.
  - 사용자가 입력한 내용이 문자열 형태로 리턴
  - 사용자가 아무런 값도 입력하지 않았으면 빈 문자열 입력
  - 사용자가 취소 버튼을 눌렀다면 null이 리턴된다.


2. Math객체
 
3. Date객체
 3-1. 두 날짜의 차이를 구하기 - TimeStamp값 사용
  - 1970년 1월 1일 자정부터 지금까지의 시난 시각을 초 단위로
  바꾼 값이다.
  - getTime() 함수를 통해서 1/1000초 단위의 TimeSatamp 형태로
  변환하여 리턴해 준다.
  - (24시간 * 60분 * 60초 * 1000) 나누면 두 객체 사이의 날짜 
  차이값을 구할 수 있다.(Math.floor)
  - 나눈 값은 소수점 이하를 절단해야 한다. 두 객체 사이의 차가 
 3.5일로 계된 경우 이는 3일 5시간을 의미하는데 그렇다고 해서
 4일로 판단하지는 않기때문이다.

4. setInterval 함수
 - setInterval함수는 다른 함수의 이름과 1/1000 초 단위의
 시간값을 파라미터로 설정하여 정해진 시간에 한번씩 파라미터로 
 전달된 함수를 반복적으로 호출한다. 
	
	// 해당 함수를 1초에 한번씩 반복해서 호출
	setInterval(함수이름, 1000);

	// 지정된 시간만큼 딜레이 한 후 파라미터로 전달된
	함수를 1회만 호출	
	setTimeout(함수이름 , 1000);

 4-1. 파라미터로 함수를 직접 정의하는 패턴
  - 별도의 함수를 정의하는 형태가 아니라 다음과 같이 function(){}
  블록을 직접 설정하는 것도 가능하다.
  - 이처럼 파라미터 형태로 전달되는 함수를 콜백함수 라고 한다.

	setInterval(function(){
		....
	}, 1000);

	setTimeout(function(){
		....
	}, 1000)

5. 객체
 5-1. 객체의 생성 과정
  - 빈 객체의 생성
	-> 아무런 기능이 없는 상태의 빈 객체를 생성
	-> prototype

  - 변수의 추가
	-> 빈 객체 안에 변수들을 추가해 넣는다
	-> 용도에 따라서 객체를 생성하고,변수를 그룹화하기
	위해서 사용된다. 

  - 함수의 추가
	-> 빈 객체 안에 함수들을 추가해 넣는다. 
	-> 기능은 서로 다르지만, 용도가 비슷한 함수들은 하나의
	그룹으로 묶기 위한 단위가 객체이다. 

 5-2. 빈 객체의 생성
	let people = {}

 5-3. 변수의 추가
 - 객체안에 추가되어 있는 변수를 멤버변수 혹은 프로퍼티 라고 한다.
  - 변수를 추가하기 위해서는 객체이름.변수명 = 값 의 형식을 사용
  - 선언위한 별도의 키워드는 사용되지 않는다. 

	people.name = "자바학생";
	people.age = 20;
	
6. String

7. 웹 브라우저와 javascript
 - HTML : 정보
 - CSS : 디자인
 - Javascript : 웹브라우저 HTML 제어


















